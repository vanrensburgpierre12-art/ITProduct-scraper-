version: '3.8'

services:
  # PostgreSQL Database for Production
  postgres:
    image: postgres:15-alpine
    container_name: electronics_db_prod
    environment:
      POSTGRES_DB: electronics_db
      POSTGRES_USER: electronics_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-electronics_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups
    networks:
      - electronics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U electronics_user -d electronics_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis for Production
  redis:
    image: redis:7-alpine
    container_name: electronics_redis_prod
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
    networks:
      - electronics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Production API
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: electronics_api_prod
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://electronics_user:${POSTGRES_PASSWORD:-electronics_password}@postgres:5432/electronics_db
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: electronics_db
      DB_USER: electronics_user
      DB_PASSWORD: ${POSTGRES_PASSWORD:-electronics_password}
      
      # Flask Configuration
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key-change-in-production}
      
      # API Configuration
      API_RATE_LIMIT: ${API_RATE_LIMIT:-1000}
      DEFAULT_PAGE_SIZE: 50
      MAX_PAGE_SIZE: 1000
      
      # Scraping Configuration
      SCRAPING_INTERVAL_MINUTES: ${SCRAPING_INTERVAL_MINUTES:-25}
      SCRAPING_ENABLED: ${SCRAPING_ENABLED:-true}
      
      # WebSocket Configuration
      WEBSOCKET_ENABLED: ${WEBSOCKET_ENABLED:-true}
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs
    networks:
      - electronics_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/api/auth/me"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: electronics_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - electronics_network
    depends_on:
      - api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    container_name: electronics_backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-electronics_password}
    volumes:
      - ./backups:/backups
      - ./backup-script.sh:/backup-script.sh:ro
    networks:
      - electronics_network
    depends_on:
      - postgres
    restart: "no"
    command: ["sh", "-c", "while true; do sleep 86400; /backup-script.sh; done"]
    profiles:
      - backup

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  electronics_network:
    driver: bridge